
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  profilePictureUrl: 'profilePictureUrl',
  emailVerified: 'emailVerified'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  fullName: 'fullName',
  dateOfBirth: 'dateOfBirth',
  age: 'age',
  gender: 'gender',
  address: 'address',
  contactNumber: 'contactNumber',
  religion: 'religion',
  civilStatus: 'civilStatus',
  occupation: 'occupation',
  educationLevel: 'educationLevel',
  philhealthNumber: 'philhealthNumber',
  nhtsStatus: 'nhtsStatus',
  personWithDisability: 'personWithDisability',
  indigenousPeople: 'indigenousPeople',
  createdAt: 'createdAt'
};

exports.Prisma.HealthWorkerScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  role: 'role',
  contactNumber: 'contactNumber',
  signature: 'signature',
  isActive: 'isActive'
};

exports.Prisma.FamilyRecordScalarFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  headOfFamilyId: 'headOfFamilyId',
  address: 'address',
  contactNumber: 'contactNumber',
  smsConsent: 'smsConsent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FamilyMemberScalarFieldEnum = {
  id: 'id',
  familyRecordId: 'familyRecordId',
  userProfileId: 'userProfileId',
  memberName: 'memberName',
  relationship: 'relationship',
  gender: 'gender',
  age: 'age',
  occupation: 'occupation',
  civilStatus: 'civilStatus'
};

exports.Prisma.FamilyHealthHistoryScalarFieldEnum = {
  id: 'id',
  familyRecordId: 'familyRecordId',
  geneticConditions: 'geneticConditions',
  chronicDiseases: 'chronicDiseases',
  recordedDate: 'recordedDate',
  recordedBy: 'recordedBy'
};

exports.Prisma.MaternalHealthScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  mothersName: 'mothersName',
  mothersAge: 'mothersAge',
  mothersBirthday: 'mothersBirthday',
  mothersMaidenName: 'mothersMaidenName',
  mothersReligion: 'mothersReligion',
  mothersEducation: 'mothersEducation',
  mothersOccupation: 'mothersOccupation',
  numberOfChildren: 'numberOfChildren',
  gravidaPara: 'gravidaPara',
  menarcheAge: 'menarcheAge',
  lastMenstrualPeriod: 'lastMenstrualPeriod',
  expectedDeliveryDate: 'expectedDeliveryDate',
  tetanusToxoidStatus: 'tetanusToxoidStatus',
  createdAt: 'createdAt'
};

exports.Prisma.PrenatalVisitScalarFieldEnum = {
  id: 'id',
  maternalHealthId: 'maternalHealthId',
  visitDate: 'visitDate',
  gestationalAgeWeeks: 'gestationalAgeWeeks',
  weightKg: 'weightKg',
  heightCm: 'heightCm',
  bloodPressure: 'bloodPressure',
  fundalHeightCm: 'fundalHeightCm',
  fetalHeartTone: 'fetalHeartTone',
  nextVisitDate: 'nextVisitDate',
  recordedBy: 'recordedBy'
};

exports.Prisma.LaboratoryTestScalarFieldEnum = {
  id: 'id',
  prenatalVisitId: 'prenatalVisitId',
  userProfileId: 'userProfileId',
  testDate: 'testDate',
  testType: 'testType',
  testCompleted: 'testCompleted',
  recordedBy: 'recordedBy'
};

exports.Prisma.InterventionScalarFieldEnum = {
  id: 'id',
  prenatalVisitId: 'prenatalVisitId',
  tetanusToxoidDose: 'tetanusToxoidDose',
  tetanusToxoidLocation: 'tetanusToxoidLocation',
  tetanusToxoidDate: 'tetanusToxoidDate',
  ironSupplementation: 'ironSupplementation',
  ironMedication: 'ironMedication',
  vitaminSupplementation: 'vitaminSupplementation',
  vitaminMedication: 'vitaminMedication',
  calciumSupplementation: 'calciumSupplementation',
  calciumMedication: 'calciumMedication',
  healthEducationTopics: 'healthEducationTopics'
};

exports.Prisma.BirthInformationScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  maternalHealthId: 'maternalHealthId',
  placeOfDelivery: 'placeOfDelivery',
  timeOfDelivery: 'timeOfDelivery',
  deliveryType: 'deliveryType',
  birthWeightKg: 'birthWeightKg',
  birthHeightCm: 'birthHeightCm',
  newbornScreeningDate: 'newbornScreeningDate',
  newbornScreeningCompleted: 'newbornScreeningCompleted',
  feedingType: 'feedingType',
  createdAt: 'createdAt',
  recordedBy: 'recordedBy'
};

exports.Prisma.ImmunizationEventScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  visitDate: 'visitDate',
  temperatureCelsius: 'temperatureCelsius',
  weightKg: 'weightKg',
  heightCm: 'heightCm',
  adverseReactions: 'adverseReactions',
  healthWorkerName: 'healthWorkerName',
  healthWorkerSignature: 'healthWorkerSignature',
  nextFollowupDate: 'nextFollowupDate',
  recordedBy: 'recordedBy'
};

exports.Prisma.VaccineGivenScalarFieldEnum = {
  id: 'id',
  immunizationEventId: 'immunizationEventId',
  vaccineName: 'vaccineName',
  doseNumber: 'doseNumber',
  dateGiven: 'dateGiven',
  lotNumber: 'lotNumber'
};

exports.Prisma.VitalSignsScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  recordDate: 'recordDate',
  bloodPressure: 'bloodPressure',
  heartRate: 'heartRate',
  respiratoryRate: 'respiratoryRate',
  temperatureCelsius: 'temperatureCelsius',
  pulseRate: 'pulseRate',
  recordedBy: 'recordedBy'
};

exports.Prisma.AnthropometricMeasurementScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  measurementDate: 'measurementDate',
  weightKg: 'weightKg',
  heightCm: 'heightCm',
  headCircumferenceCm: 'headCircumferenceCm',
  waistCircumferenceCm: 'waistCircumferenceCm',
  bmi: 'bmi',
  recordedBy: 'recordedBy'
};

exports.Prisma.GrowthTrackingScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  trackingDate: 'trackingDate',
  weightForAge: 'weightForAge',
  heightForAge: 'heightForAge',
  weightForHeight: 'weightForHeight',
  recordedBy: 'recordedBy'
};

exports.Prisma.NCDRiskAssessmentScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  assessmentDate: 'assessmentDate',
  smokingStatus: 'smokingStatus',
  alcoholIntake: 'alcoholIntake',
  physicalActivity: 'physicalActivity',
  fruitVegetableIntake: 'fruitVegetableIntake',
  familyHistoryDiabetes: 'familyHistoryDiabetes',
  familyHistoryHypertension: 'familyHistoryHypertension',
  familyHistoryHeartDisease: 'familyHistoryHeartDisease',
  familyHistoryStroke: 'familyHistoryStroke',
  screeningCompleted: 'screeningCompleted',
  followUpNeeded: 'followUpNeeded',
  lifestyleModifications: 'lifestyleModifications',
  healthEducationReceived: 'healthEducationReceived',
  recordedBy: 'recordedBy'
};

exports.Prisma.VisitRecordScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  visitDate: 'visitDate',
  visitType: 'visitType',
  visitFrequency: 'visitFrequency',
  referred: 'referred',
  facilityName: 'facilityName',
  referralReason: 'referralReason',
  recordedBy: 'recordedBy'
};

exports.Prisma.HealthEducationScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  topicsCovered: 'topicsCovered',
  dateProvided: 'dateProvided',
  providedBy: 'providedBy'
};

exports.Prisma.NutritionalCounselingScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  recommendations: 'recommendations',
  dateProvided: 'dateProvided',
  providedBy: 'providedBy'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  facilityName: 'facilityName',
  reason: 'reason',
  dateReferred: 'dateReferred',
  status: 'status',
  referredBy: 'referredBy'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  nextVisitDate: 'nextVisitDate',
  visitType: 'visitType',
  appointmentStatus: 'appointmentStatus',
  scheduledBy: 'scheduledBy',
  createdAt: 'createdAt'
};

exports.Prisma.ImmunizationReminderScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  vaccineName: 'vaccineName',
  dueDate: 'dueDate',
  reminderSent: 'reminderSent',
  sentAt: 'sentAt'
};

exports.Prisma.TestReminderScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  testName: 'testName',
  dueDate: 'dueDate',
  reminderSent: 'reminderSent',
  sentAt: 'sentAt'
};

exports.Prisma.VirtualCheckupScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  healthWorkerId: 'healthWorkerId',
  scheduledDate: 'scheduledDate',
  scheduledTime: 'scheduledTime',
  meetingUrl: 'meetingUrl',
  status: 'status',
  consultationType: 'consultationType',
  chiefComplaint: 'chiefComplaint',
  notes: 'notes',
  durationMinutes: 'durationMinutes',
  createdAt: 'createdAt'
};

exports.Prisma.VirtualCheckupNoteScalarFieldEnum = {
  id: 'id',
  virtualCheckupId: 'virtualCheckupId',
  note: 'note',
  createdBy: 'createdBy'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  eventType: 'eventType',
  eventDate: 'eventDate',
  startTime: 'startTime',
  endTime: 'endTime',
  venue: 'venue',
  targetAudience: 'targetAudience',
  maxParticipants: 'maxParticipants',
  status: 'status',
  bannerImageUrl: 'bannerImageUrl',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.EventRegistrationScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userProfileId: 'userProfileId',
  registrationDate: 'registrationDate',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.MedicalProgramScalarFieldEnum = {
  id: 'id',
  programName: 'programName',
  description: 'description',
  programType: 'programType',
  startDate: 'startDate',
  endDate: 'endDate',
  venue: 'venue',
  targetDemographic: 'targetDemographic',
  targetParticipants: 'targetParticipants',
  status: 'status',
  bannerImageUrl: 'bannerImageUrl',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ProgramParticipationScalarFieldEnum = {
  id: 'id',
  medicalProgramId: 'medicalProgramId',
  userProfileId: 'userProfileId',
  participationDate: 'participationDate',
  status: 'status',
  servicesReceived: 'servicesReceived',
  notes: 'notes',
  recordedBy: 'recordedBy'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  subject: 'subject',
  message: 'message',
  priority: 'priority',
  status: 'status',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.InquiryResponseScalarFieldEnum = {
  id: 'id',
  inquiryId: 'inquiryId',
  message: 'message',
  respondedBy: 'respondedBy'
};

exports.Prisma.SurveyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  surveyType: 'surveyType',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  qrCode: 'qrCode',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SurveyQuestionScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  questionText: 'questionText',
  questionType: 'questionType',
  options: 'options',
  isRequired: 'isRequired',
  orderIndex: 'orderIndex'
};

exports.Prisma.SurveyResponseScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  userProfileId: 'userProfileId',
  ipAddress: 'ipAddress',
  submittedAt: 'submittedAt'
};

exports.Prisma.SurveyAnswerScalarFieldEnum = {
  id: 'id',
  surveyResponseId: 'surveyResponseId',
  surveyQuestionId: 'surveyQuestionId',
  answer: 'answer'
};

exports.Prisma.AnalyticsReportScalarFieldEnum = {
  id: 'id',
  reportName: 'reportName',
  reportType: 'reportType',
  dataFilters: 'dataFilters',
  reportData: 'reportData',
  reportPeriodStart: 'reportPeriodStart',
  reportPeriodEnd: 'reportPeriodEnd',
  generatedBy: 'generatedBy'
};

exports.Prisma.PredictionModelScalarFieldEnum = {
  id: 'id',
  modelName: 'modelName',
  modelType: 'modelType',
  modelParameters: 'modelParameters',
  predictionResults: 'predictionResults',
  accuracy: 'accuracy',
  lastTrained: 'lastTrained',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  profilePictureUrl: 'profilePictureUrl'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  fullName: 'fullName',
  gender: 'gender',
  address: 'address',
  contactNumber: 'contactNumber',
  religion: 'religion',
  civilStatus: 'civilStatus',
  occupation: 'occupation',
  educationLevel: 'educationLevel',
  philhealthNumber: 'philhealthNumber',
  nhtsStatus: 'nhtsStatus'
};

exports.Prisma.HealthWorkerOrderByRelevanceFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  role: 'role',
  contactNumber: 'contactNumber',
  signature: 'signature'
};

exports.Prisma.FamilyRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  familyId: 'familyId',
  headOfFamilyId: 'headOfFamilyId',
  address: 'address',
  contactNumber: 'contactNumber'
};

exports.Prisma.FamilyMemberOrderByRelevanceFieldEnum = {
  id: 'id',
  familyRecordId: 'familyRecordId',
  userProfileId: 'userProfileId',
  memberName: 'memberName',
  relationship: 'relationship',
  gender: 'gender',
  occupation: 'occupation',
  civilStatus: 'civilStatus'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.FamilyHealthHistoryOrderByRelevanceFieldEnum = {
  id: 'id',
  familyRecordId: 'familyRecordId',
  recordedBy: 'recordedBy'
};

exports.Prisma.MaternalHealthOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  mothersName: 'mothersName',
  mothersMaidenName: 'mothersMaidenName',
  mothersReligion: 'mothersReligion',
  mothersEducation: 'mothersEducation',
  mothersOccupation: 'mothersOccupation',
  gravidaPara: 'gravidaPara',
  tetanusToxoidStatus: 'tetanusToxoidStatus'
};

exports.Prisma.PrenatalVisitOrderByRelevanceFieldEnum = {
  id: 'id',
  maternalHealthId: 'maternalHealthId',
  bloodPressure: 'bloodPressure',
  fetalHeartTone: 'fetalHeartTone',
  recordedBy: 'recordedBy'
};

exports.Prisma.LaboratoryTestOrderByRelevanceFieldEnum = {
  id: 'id',
  prenatalVisitId: 'prenatalVisitId',
  userProfileId: 'userProfileId',
  testType: 'testType',
  recordedBy: 'recordedBy'
};

exports.Prisma.InterventionOrderByRelevanceFieldEnum = {
  id: 'id',
  prenatalVisitId: 'prenatalVisitId',
  tetanusToxoidDose: 'tetanusToxoidDose',
  tetanusToxoidLocation: 'tetanusToxoidLocation',
  ironMedication: 'ironMedication',
  vitaminMedication: 'vitaminMedication',
  calciumMedication: 'calciumMedication'
};

exports.Prisma.BirthInformationOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  maternalHealthId: 'maternalHealthId',
  placeOfDelivery: 'placeOfDelivery',
  timeOfDelivery: 'timeOfDelivery',
  deliveryType: 'deliveryType',
  feedingType: 'feedingType',
  recordedBy: 'recordedBy'
};

exports.Prisma.ImmunizationEventOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  adverseReactions: 'adverseReactions',
  healthWorkerName: 'healthWorkerName',
  healthWorkerSignature: 'healthWorkerSignature',
  recordedBy: 'recordedBy'
};

exports.Prisma.VaccineGivenOrderByRelevanceFieldEnum = {
  id: 'id',
  immunizationEventId: 'immunizationEventId',
  vaccineName: 'vaccineName',
  doseNumber: 'doseNumber',
  lotNumber: 'lotNumber'
};

exports.Prisma.VitalSignsOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  bloodPressure: 'bloodPressure',
  recordedBy: 'recordedBy'
};

exports.Prisma.AnthropometricMeasurementOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  recordedBy: 'recordedBy'
};

exports.Prisma.GrowthTrackingOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  weightForAge: 'weightForAge',
  heightForAge: 'heightForAge',
  weightForHeight: 'weightForHeight',
  recordedBy: 'recordedBy'
};

exports.Prisma.NCDRiskAssessmentOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  smokingStatus: 'smokingStatus',
  alcoholIntake: 'alcoholIntake',
  physicalActivity: 'physicalActivity',
  fruitVegetableIntake: 'fruitVegetableIntake',
  recordedBy: 'recordedBy'
};

exports.Prisma.VisitRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  visitType: 'visitType',
  visitFrequency: 'visitFrequency',
  facilityName: 'facilityName',
  referralReason: 'referralReason',
  recordedBy: 'recordedBy'
};

exports.Prisma.HealthEducationOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  providedBy: 'providedBy'
};

exports.Prisma.NutritionalCounselingOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  recommendations: 'recommendations',
  providedBy: 'providedBy'
};

exports.Prisma.ReferralOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  facilityName: 'facilityName',
  reason: 'reason',
  status: 'status',
  referredBy: 'referredBy'
};

exports.Prisma.AppointmentOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  visitType: 'visitType',
  appointmentStatus: 'appointmentStatus',
  scheduledBy: 'scheduledBy'
};

exports.Prisma.ImmunizationReminderOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  vaccineName: 'vaccineName'
};

exports.Prisma.TestReminderOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  testName: 'testName'
};

exports.Prisma.VirtualCheckupOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  healthWorkerId: 'healthWorkerId',
  scheduledTime: 'scheduledTime',
  meetingUrl: 'meetingUrl',
  status: 'status',
  consultationType: 'consultationType',
  chiefComplaint: 'chiefComplaint',
  notes: 'notes'
};

exports.Prisma.VirtualCheckupNoteOrderByRelevanceFieldEnum = {
  id: 'id',
  virtualCheckupId: 'virtualCheckupId',
  note: 'note',
  createdBy: 'createdBy'
};

exports.Prisma.EventOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  eventType: 'eventType',
  startTime: 'startTime',
  endTime: 'endTime',
  venue: 'venue',
  targetAudience: 'targetAudience',
  status: 'status',
  bannerImageUrl: 'bannerImageUrl',
  createdBy: 'createdBy'
};

exports.Prisma.EventRegistrationOrderByRelevanceFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userProfileId: 'userProfileId',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.MedicalProgramOrderByRelevanceFieldEnum = {
  id: 'id',
  programName: 'programName',
  description: 'description',
  programType: 'programType',
  venue: 'venue',
  targetDemographic: 'targetDemographic',
  status: 'status',
  bannerImageUrl: 'bannerImageUrl',
  createdBy: 'createdBy'
};

exports.Prisma.ProgramParticipationOrderByRelevanceFieldEnum = {
  id: 'id',
  medicalProgramId: 'medicalProgramId',
  userProfileId: 'userProfileId',
  status: 'status',
  servicesReceived: 'servicesReceived',
  notes: 'notes',
  recordedBy: 'recordedBy'
};

exports.Prisma.InquiryOrderByRelevanceFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  subject: 'subject',
  message: 'message',
  priority: 'priority',
  status: 'status',
  category: 'category'
};

exports.Prisma.InquiryResponseOrderByRelevanceFieldEnum = {
  id: 'id',
  inquiryId: 'inquiryId',
  message: 'message',
  respondedBy: 'respondedBy'
};

exports.Prisma.SurveyOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  surveyType: 'surveyType',
  qrCode: 'qrCode',
  createdBy: 'createdBy'
};

exports.Prisma.SurveyQuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  questionText: 'questionText',
  questionType: 'questionType'
};

exports.Prisma.SurveyResponseOrderByRelevanceFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  userProfileId: 'userProfileId',
  ipAddress: 'ipAddress'
};

exports.Prisma.SurveyAnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  surveyResponseId: 'surveyResponseId',
  surveyQuestionId: 'surveyQuestionId',
  answer: 'answer'
};

exports.Prisma.AnalyticsReportOrderByRelevanceFieldEnum = {
  id: 'id',
  reportName: 'reportName',
  reportType: 'reportType',
  generatedBy: 'generatedBy'
};

exports.Prisma.PredictionModelOrderByRelevanceFieldEnum = {
  id: 'id',
  modelName: 'modelName',
  modelType: 'modelType',
  createdBy: 'createdBy'
};

exports.Prisma.SystemLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  UserProfile: 'UserProfile',
  HealthWorker: 'HealthWorker',
  FamilyRecord: 'FamilyRecord',
  FamilyMember: 'FamilyMember',
  FamilyHealthHistory: 'FamilyHealthHistory',
  MaternalHealth: 'MaternalHealth',
  PrenatalVisit: 'PrenatalVisit',
  LaboratoryTest: 'LaboratoryTest',
  Intervention: 'Intervention',
  BirthInformation: 'BirthInformation',
  ImmunizationEvent: 'ImmunizationEvent',
  VaccineGiven: 'VaccineGiven',
  VitalSigns: 'VitalSigns',
  AnthropometricMeasurement: 'AnthropometricMeasurement',
  GrowthTracking: 'GrowthTracking',
  NCDRiskAssessment: 'NCDRiskAssessment',
  VisitRecord: 'VisitRecord',
  HealthEducation: 'HealthEducation',
  NutritionalCounseling: 'NutritionalCounseling',
  Referral: 'Referral',
  Appointment: 'Appointment',
  ImmunizationReminder: 'ImmunizationReminder',
  TestReminder: 'TestReminder',
  VirtualCheckup: 'VirtualCheckup',
  VirtualCheckupNote: 'VirtualCheckupNote',
  Event: 'Event',
  EventRegistration: 'EventRegistration',
  MedicalProgram: 'MedicalProgram',
  ProgramParticipation: 'ProgramParticipation',
  Inquiry: 'Inquiry',
  InquiryResponse: 'InquiryResponse',
  Survey: 'Survey',
  SurveyQuestion: 'SurveyQuestion',
  SurveyResponse: 'SurveyResponse',
  SurveyAnswer: 'SurveyAnswer',
  AnalyticsReport: 'AnalyticsReport',
  PredictionModel: 'PredictionModel',
  SystemLog: 'SystemLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
